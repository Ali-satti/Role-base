// Code generated by go-swagger; DO NOT EDIT.

package getting_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"RolesBased/gen/models"
)

// GetroleReader is a Reader for the Getrole structure.
type GetroleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetroleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetroleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetroleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetroleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetroleOK creates a GetroleOK with default headers values
func NewGetroleOK() *GetroleOK {
	return &GetroleOK{}
}

/* GetroleOK describes a response with status code 200, with default header values.

OK
*/
type GetroleOK struct {
	Payload *models.Rolereturn
}

func (o *GetroleOK) Error() string {
	return fmt.Sprintf("[GET /role][%d] getroleOK  %+v", 200, o.Payload)
}
func (o *GetroleOK) GetPayload() *models.Rolereturn {
	return o.Payload
}

func (o *GetroleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rolereturn)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetroleBadRequest creates a GetroleBadRequest with default headers values
func NewGetroleBadRequest() *GetroleBadRequest {
	return &GetroleBadRequest{}
}

/* GetroleBadRequest describes a response with status code 400, with default header values.

Bad Rquest
*/
type GetroleBadRequest struct {
	Payload string
}

func (o *GetroleBadRequest) Error() string {
	return fmt.Sprintf("[GET /role][%d] getroleBadRequest  %+v", 400, o.Payload)
}
func (o *GetroleBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GetroleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetroleUnauthorized creates a GetroleUnauthorized with default headers values
func NewGetroleUnauthorized() *GetroleUnauthorized {
	return &GetroleUnauthorized{}
}

/* GetroleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetroleUnauthorized struct {
	Payload *models.Rolereturn
}

func (o *GetroleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /role][%d] getroleUnauthorized  %+v", 401, o.Payload)
}
func (o *GetroleUnauthorized) GetPayload() *models.Rolereturn {
	return o.Payload
}

func (o *GetroleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Rolereturn)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
