// Code generated by go-swagger; DO NOT EDIT.

package getting_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetroleHandlerFunc turns a function with the right signature into a getrole handler
type GetroleHandlerFunc func(GetroleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetroleHandlerFunc) Handle(params GetroleParams) middleware.Responder {
	return fn(params)
}

// GetroleHandler interface for that can handle valid getrole params
type GetroleHandler interface {
	Handle(GetroleParams) middleware.Responder
}

// NewGetrole creates a new http.Handler for the getrole operation
func NewGetrole(ctx *middleware.Context, handler GetroleHandler) *Getrole {
	return &Getrole{Context: ctx, Handler: handler}
}

/* Getrole swagger:route GET /role Getting Role getrole

get roles

*/
type Getrole struct {
	Context *middleware.Context
	Handler GetroleHandler
}

func (o *Getrole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetroleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
