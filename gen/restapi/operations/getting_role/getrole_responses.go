// Code generated by go-swagger; DO NOT EDIT.

package getting_role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"RolesBased/gen/models"
)

// GetroleOKCode is the HTTP code returned for type GetroleOK
const GetroleOKCode int = 200

/*GetroleOK OK

swagger:response getroleOK
*/
type GetroleOK struct {

	/*
	  In: Body
	*/
	Payload *models.Rolereturn `json:"body,omitempty"`
}

// NewGetroleOK creates GetroleOK with default headers values
func NewGetroleOK() *GetroleOK {

	return &GetroleOK{}
}

// WithPayload adds the payload to the getrole o k response
func (o *GetroleOK) WithPayload(payload *models.Rolereturn) *GetroleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the getrole o k response
func (o *GetroleOK) SetPayload(payload *models.Rolereturn) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetroleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetroleBadRequestCode is the HTTP code returned for type GetroleBadRequest
const GetroleBadRequestCode int = 400

/*GetroleBadRequest Bad request

swagger:response getroleBadRequest
*/
type GetroleBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Rolereturn3 `json:"body,omitempty"`
}

// NewGetroleBadRequest creates GetroleBadRequest with default headers values
func NewGetroleBadRequest() *GetroleBadRequest {

	return &GetroleBadRequest{}
}

// WithPayload adds the payload to the getrole bad request response
func (o *GetroleBadRequest) WithPayload(payload *models.Rolereturn3) *GetroleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the getrole bad request response
func (o *GetroleBadRequest) SetPayload(payload *models.Rolereturn3) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetroleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetroleForbiddenCode is the HTTP code returned for type GetroleForbidden
const GetroleForbiddenCode int = 403

/*GetroleForbidden Forbidden

swagger:response getroleForbidden
*/
type GetroleForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Rolereturn2 `json:"body,omitempty"`
}

// NewGetroleForbidden creates GetroleForbidden with default headers values
func NewGetroleForbidden() *GetroleForbidden {

	return &GetroleForbidden{}
}

// WithPayload adds the payload to the getrole forbidden response
func (o *GetroleForbidden) WithPayload(payload *models.Rolereturn2) *GetroleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the getrole forbidden response
func (o *GetroleForbidden) SetPayload(payload *models.Rolereturn2) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetroleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetroleInternalServerErrorCode is the HTTP code returned for type GetroleInternalServerError
const GetroleInternalServerErrorCode int = 500

/*GetroleInternalServerError Internal server error

swagger:response getroleInternalServerError
*/
type GetroleInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Rolereturn1 `json:"body,omitempty"`
}

// NewGetroleInternalServerError creates GetroleInternalServerError with default headers values
func NewGetroleInternalServerError() *GetroleInternalServerError {

	return &GetroleInternalServerError{}
}

// WithPayload adds the payload to the getrole internal server error response
func (o *GetroleInternalServerError) WithPayload(payload *models.Rolereturn1) *GetroleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the getrole internal server error response
func (o *GetroleInternalServerError) SetPayload(payload *models.Rolereturn1) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetroleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
